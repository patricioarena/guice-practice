/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import app.component.motor.CombustionMotor;
import app.component.motor.ElectricMotor;
import app.component.motor.Motor;
import app.config.AppModule;
import app.constant.enums.FuelType;
import app.constant.enums.StateVehicle;
import app.model.Car;
import app.model.LightSailboat;
import app.usecase.VehicleAdapter;
import com.google.inject.Guice;
import com.google.inject.Injector;
import java.util.Scanner;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class Main {

//  private static final Logger logger = Logger.getLogger(Main.class.getName());

  public static void main(String[] args) {

    // Configura el logger para mostrar información detallada
    // Logger guiceLogger = Logger.getLogger("com.google.inject");
    // guiceLogger.setLevel(java.util.logging.Level.ALL);

    // Injector injector = Guice.createInjector(new General());

    // Imprime información sobre los bindings configurados en el módulo
    // System.out.println("Bindings en el módulo:");
    // injector.getAllBindings().forEach((key, binding) -> System.out.println(key + " -> " +
    // binding));

    final Injector injector = Guice.createInjector(new AppModule());
    final VehicleAdapter adapter = injector.getInstance(VehicleAdapter.class);

    final LightSailboat boat = adapter.createLightSailboat(StateVehicle.NEW);
    log.info("{}", boat);

    final Car car = adapter.createCar(StateVehicle.NEW);
    log.info("{}", car);

    // Create a combustion motor
    final Motor combustionMotor = new CombustionMotor(150, 4, FuelType.GASOLINE);
    combustionMotor.start();
    combustionMotor.showDetails();
    combustionMotor.stop();

    System.out.println("----------");

    // Create an electric motor
    final Motor electricMotor = new ElectricMotor(100, 75);
    electricMotor.start();
    electricMotor.showDetails();
    electricMotor.stop();

//    menu(adapter);
  }

  private static void menu(final VehicleAdapter adapter) {
    final var scanner = new Scanner(System.in);
    boolean exit = false;

    while (!exit) {
      System.out.println("Menú:");
      System.out.println("1. Crear un coche");
      System.out.println("2. Crear un velero ligero");
      System.out.println("3. Salir");
      System.out.print("Seleccione una opción: ");

      final var option = scanner.nextInt();

      switch (option) {
        case 1:
          final var car = adapter.createCar(StateVehicle.NEW);
          System.out.println("Coche creado: " + car);
          break;
        case 2:
          final var boat = adapter.createLightSailboat(StateVehicle.NEW);
          System.out.println("Velero ligero creado: " + boat);
          break;
        case 3:
          exit = true;
          System.out.println("Saliendo del programa...");
          break;
        default:
          System.out.println("Opción no válida. Intente de nuevo.");
      }
    }
    scanner.close();
  }
}
